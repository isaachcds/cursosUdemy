	O que é um programa/software?
- é um conjunto de declarações (statements);
- Statments são conjuntos de expressões(expressions);
- Expression é todo fragmento de código que produz um valor;


- Software tem um 'objetivo';
- Statements(declarações) 'guiam' o software para seu objetivo
- Expressions são os valores que os statements esperam para guiar o software;

 Nós ja vimos essas declarações (statements) e expressions de forma simples;

Statment: console.log(1 >2);
Expression: console.log('batata');

Porém ainda não é o suficiente para criar um software
____________________________________________________

	Variaveis
	_________
	 Valores
- Salvamos os valores em variáveis (isso é um statement(declaração))
- let laranjas = 5;
- E depois pode-se criar expressões com os valores salvos;
- console.log(laranjas * laranjas);
- console.log(`Tem ${laranjas} na sexta`

	Outras maneiras de salvar valor
- Podemos definir valores com var e const;
- var nome = 'Pedro';
- const sobrenome = 'Soares';
- console.log(sobrenome);

 var é uma forma mais antiga, voce deve optar por let ou const
 const vem de constante, ou seja, o seu valor não pode ser alterado
	
	Convenção no nome das variaveis
- Não pode começar com um número (let 2teste)
- Mas pode terminar com número (let teste9 = 'testando')
- Pode ter $ ou _, mas não outros caracteres especiais (let $nome, _nome);
- Mas não pode ter pontuação ou outros especiais (let @teste)
- podemos iniciar com letras maiuscula (let Nome = 'Matheus');
- ou usar camelCase (let meuPrimeiroNome = 'Matheus');

	Nomes de variaveis reservadas
- Alguns nomes não podem ser utilizados para iniciar variaveis

- palavras ja reservadas no JS: break, case, catch, class, const, continue, debugger, default, delete, do, else, enum, export, extends, false, finally, for, function, if, implements, import, interface, in, instanceof, let, new, package, private, protected, public, return, static, super, switch, this, throw, true, try, typeof, var, void, while, with e yield

Ex: let break = 'parar'
Porém podemos usar elas + alguma palavra/digito:
Ex: let breakMatheus = 1;
___________________________________________
	
	Como funciona o ambiente 
 - Quando qualquer programa é iniciado, um ambiente é criado
E este ambiente não inicia vazio
 - Ele contém funções nativas da linguagem;
 - Funções são blocos de código, que nos retornam um valor ou ação;
 - O ambiente de JavaScript, neste curso, poderiamos entender como navegador;

	A estrutura de uma função
Antes de mais nada: funções são chamadas durante o programa

 - Você também poe ouvir: executar, chamar, invocar uma função;

 - E nós chamamos a função utilizando o nome dela + abrindo e fechando parenteses;

	[ex: nomeDaFuncao();]

 - Também podemos inserir parametros, em algumas funções são obrigatorios;

 - Basicamente são valoes que podem mudar o resultado da função; 

	[ex: nomeDaFuncao(parametro1, parametro2);

	Função built-in: prompt()
 - Recebe um input do usuário do sistema e pode guardar este valor;
	[ex: let idade = prompt('qual sua idade?);
	console.log(idade);
 - Esta função é pouco utilizada	
_______________________________________________
	Estruturas de controle
		(condição)
Um programa é executado de cima para baixo;
Com as estruturas podemos modelar o fluxo do programa;
Ou seja, dependendo dos valores de statements e expressions, ele tomara um caminho diferente;

(01)	Estrutura condicional: if
O programa vai executar um bloco de código, SE algo acontecer;
 - onde algo é a condição imposta por um statement (declaração);
 - que resultar em um boolean (true or false);

	ex: let idade = 19;
	    if(idade > 18) {
		console.log('Pode entrar');
}

(02)	Estrutura condicional: else
Podemos executar um outro bloco de código, caso a instrução do if não seja atendida;
Ou seja, SE NÃO EXECUTAR o bloco if, EXECUTE o bloco else;

	ex: let nome = 'Pedro'
	    if(nome == 'João') {
		console.log('Seu nome é João');
}else{
		console.log('O seu nome não é João');
}

(03)	Estrutura condicional: else if
Ainda podemos encadear mais condições com o else if;

Ou seja, antes de executar um else, ou até mesmo sem ele, podemos verificar mais uma condição;
____________________________________________

	Estruturas de repetição
O que são estruturas de repetição?

- A ideia é repetir uma ação até atingir uma condição;
 
- Ao invés de repetirmos o mesmo código varias vezes, criamos um statement (declaração) que fará uma checagem em cada loop;
 
- Também chamada de loop;


	Estrutura de Repetição: while

- Fará uma ação, até que a condição seja atingida

- Precisamos realmente 'definir um fim' para o loop, para não termos o problema de loop infinito; 

ex:
	let x = 10
	
	while(x > 0){
		console.log(x);
		x = x - 1;
	}

	
	Estrutura de Repetição: do while

- Semelhante ao while, porém a estrutura muda um pouco

- Este método quase não é utilizado!

	let y = 0
	
	do{
		console.log(y);
		y = y + 1;
	}while(y < 5)


	Estrutura de Repetição: for

- Semelhante ao while, porém amplamente utilizado

- Na opinião do autor do curso: é a estrutura de repetição mais fácil de compreender, aconselha a preferir pelo "for"

ex:
	
	for(let numero = 2; numero < 100; numero = numero * 2){
	console.log("O numero é: " numero);
}

_________________________________________________

		Identação

- serve para organizar o código e deixar mais legível;

- não há uma regra, porem cada bloco aninhado deve ser identado uma vez;

- pessoas vão te agradecer no futuro por identar o código

- para a execução do código não afeta em nada.

ex:

	let x = 2;
	let y = 0;
	
	if(x > 2) {
		y = x + 2;
		if(y == 4) {
			console.log('Y é 4');
		}
	}

__________________________________________________
	forçando a saída de um loop: break

- As vezes precisamos parar o loop antes que complete todo o seu ciclo;

- Para isso utilizamos o break;

ex:

	for(let i =5; i < 20; i = i + 1){
		if(i % 10 == 0) {
		   console.log('Saiu do loop');
		   break;
		}
		console.log('Prosseguindo o loop')
	}
____________________________________________________
	Pulando uma execução do loop: continue

- Dependendo da nossa lógica, podemos pular o resto da execução do loop;

- Para isso utilizamos a palavra continue;

ex:
	let x = 0

	while(x < 11){
	x = x + 1;
	if(x % 2 == 0) {
		continue;
	}
	console.log(x);
	x = x + 1;
	}
____________________________________________________
	Incrementando a variavel: forma fácil

- podemos incrementar uma varivael de forma mais facil: x += 1;

- ou até mesmo x++; (ou x--;)

ex:
	for(let numero = 0; numero < 10; numero += 1) {
	 console.log("O numero é: " + numero);
	}
_____________________________________________________
				estrutura de controle ou/

			*Estruturas condicional: switch*

- Quando há a necessidade de vários ifs, podemos utilizar o switch/case;

- Para sair de um case podemos utilizar o break;

- Podemos inserir uma expressão default, para caso nenhum valor for correspondido

Obs: muitos programadores optam por usar vários ifs!
_________________________________________________

	Um pouco mais sobre declaração de variáveis

- let carrovermelhogrande; (dificil de ler)
- let carro_vermelho_grande;
- let CarroVermelhoGrande;
- let carroVermelhoGrande; (mais utilizado)
___________________________________________
	Comentários no JavaScript
- Utilizado para explicar o que acontece no código;
- Ou também para testar se algum código está afetando o sistema
- Completamente ignorado pelo interpretador de código;
- Uma linha e multi-linha;

	// Comentario de uma linha

/*
	Comentario
	de varias
	linhas
*/
______________________________________________